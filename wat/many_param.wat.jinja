;; Use many parameters and results

;; toywasm (with `TOYWASM_USE_SMALL_CELLS=ON`) slows down if the number of
;; parameter cells overflows 16-bit.
;; jinja2 -DNUM=16383 -Duse_v128=true many_param.wat.jinja | wat2wasm -o many_param16383_v128.wasm -
;; jinja2 -DNUM=16384 -Duse_v128=true many_param.wat.jinja | wat2wasm -o many_param16384_v128.wasm -
;; % time toywasm many_param16383_v128.wasm
;; u 0.01s s 0.00s e 0.01s maj 0 min 705 in 0 out 0
;; % time toywasm many_param16384_v128.wasm
;; u 0.31s s 0.00s e 0.31s maj 0 min 697 in 0 out 0
;; % time toywasm --disable-resulttype-cellidx many_param16383_v128.wasm
;; u 0.30s s 0.00s e 0.30s maj 0 min 686 in 0 out 0
;; %
;;
;; wamrc has a limit on number of cells: 64
;; https://github.com/bytecodealliance/wasm-micro-runtime/blob/a2d4744a2b2c587eacca66c357dc2e88925fcadd/core/iwasm/compilation/aot_emit_function.c#L708-L712
;; jinja2 -DNUM=64 many_param.wat.jinja | wat2wasm -o many_param64.wasm -
;; jinja2 -DNUM=16 -Duse_v128=true many_param.wat.jinja | wat2wasm -o many_param16_v128.wasm -
;;
;; wamr also has various limits around UINT16_MAX / INT16_MAX.
;;
;; wasmtime: 1000
;; https://github.com/bytecodealliance/wasm-tools/blob/5e8639a37260cdc1aab196f5ae5c7ae6427c214f/crates/wasmparser/src/limits.rs#L29-L30
{% set NUM = NUM | default(65535) | int %}

{% set INPUT = 100000 %}

{#
    (INPUT + NUM - 1) + (INPUT + NUM - 2) + ... + (INPUT + 0)
    = INPUT * NUM + NUM * (NUM - 1) / 2
    = 100000 * 65535 + 65535 * (65535 - 1) / 2
    = 8700885345
    = 110950753 (32-bit truncation)
#}
{% set EXPECTED = (INPUT * NUM + NUM * (NUM - 1) // 2) % 4294967296 %}

{% set use_v128 = use_v128 | default(false) %}
{% if use_v128 %}
{% set type = "v128" %}
{% macro const(v) %}
(i32x4.splat (i32.const {{v}}))
{% endmacro %}
{% set add_insn = "i32x4.add" %}
{% else %}
{% set type = "i32" %}
{% macro const(v) %}
(i32.const {{v}})
{% endmacro %}
{% set add_insn = "i32.add" %}
{% endif %}

(module
  (type $add_many_params_type (func (param
    {%- for x in range(NUM) %} {{type}}{% endfor -%}
  ) (result {{type}})))
  (type $pass_many_values_type (func (param
    {%- for x in range(NUM) %} {{type}}{% endfor -%}
  ) (result
    {%- for x in range(NUM) %} {{type}}{% endfor -%}
  )))
  (type $return_many_results_type (func (param {{type}}) (result
    {%- for x in range(NUM) %} {{type}}{% endfor -%}
  )))

  (func $add_many_params (export "add_many_params") (type $add_many_params_type)
    {% for x in range(NUM) -%}
    local.get {{x}}
    {% endfor -%}
    {% for x in range(NUM-1) -%}
    {{add_insn}}
    {% endfor -%}
  )
  (func $pass_many_values (export "pass_many_values") (type $pass_many_values_type)
    {% for x in range(NUM) -%}
    local.get {{x}}
    {% endfor -%}
  )
  (func $return_many_results (export "return_many_results") (type $return_many_results_type)
    {% for x in range(NUM) -%}
    ({{add_insn}} {{const(x)}} (local.get 0))
    {% endfor -%}
  )
  (func $test (export "test") (param {{type}}) (result {{type}})
    local.get 0
    call $return_many_results
    call $pass_many_values
    call $add_many_params
  )
  (func $test_indirect (export "test_indirect") (param {{type}}) (result {{type}})
    local.get 0
    i32.const 2
    call_indirect (type $return_many_results_type)
    i32.const 1
    call_indirect (type $pass_many_values_type)
    i32.const 0
    call_indirect (type $add_many_params_type)
  )
  (func (export "_start")
    {{const(EXPECTED)}}
    {{const(INPUT)}}
    call $test
    block (param {{type}} {{type}})
      {% if use_v128 %}
      i32x4.eq
      i32x4.all_true
      {% else %}
      i32.eq
      {% endif %}
      br_if 0
      unreachable
    end
    {{const(EXPECTED)}}
    {{const(INPUT)}}
    call $test_indirect
    block (param {{type}} {{type}})
      {% if use_v128 %}
      i32x4.eq
      i32x4.all_true
      {% else %}
      i32.eq
      {% endif %}
      br_if 0
      unreachable
    end
  )
  (memory (export "memory") 1)
  (table 3 3 funcref)
  (elem (i32.const 0) func $add_many_params $pass_many_values $return_many_results)
)

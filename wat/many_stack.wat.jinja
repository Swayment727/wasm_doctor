;; Consume operand stack a lot within a function, similarly
;; to ../wast/many_locals.wast.in.
;;
;; % jinja2 -D NUM=11 many_stack.wat.jinja | wat2wasm -o many_stack11.wasm -
;; % toywasm --print-stats many_stack11.wasm
;; === execution statistics ===
;; operand stack 4194307 (16777228 bytes)
;; locals 5 (20 bytes)
;; labels 0 (0 bytes)
;; frames 3 (96 bytes)
;;     :
;;     :
;;     :
;;
;; % jinja2 many_stack.wat.jinja | wat2wasm -o many_stack7.wasm -
;; % toywasm --print-stats many_stack7.wasm
;; === execution statistics ===
;; operand stack 16387 (65548 bytes)
;; locals 5 (20 bytes)
;; labels 0 (0 bytes)
;; frames 3 (96 bytes)
;;     :
;;     :
;;     :
;;
;; % jinja2 -D NUM=5 many_stack.wat.jinja | wat2wasm -o many_stack5.wasm -
;; % toywasm --print-stats many_stack5.wasm
;; === execution statistics ===
;; operand stack 1027 (4108 bytes)
;; locals 5 (20 bytes)
;; labels 0 (0 bytes)
;; frames 3 (96 bytes)
;;     :
;;     :
;;     :

{% set NUM = NUM | default(7) | int %}

;; 4^7 - 1
;; = 16383
{% set NUM1 = NUM1 | default(4**NUM-1) | int %}
;; `DEF1' DEF1

;; 4^6 + ... + 4^0
;; = (4^(6+1)-1)/3
;; = 5461
{% set NUM2 = NUM2 | default((4**(NUM-1+1)-1)/3) | int %}

;; `NUM0' = {{ NUM }}
;; `NUM1' = {{ NUM1 }}
;; `NUM2' = {{ NUM2 }}

(module
  (func $add4 (export "add4") (param i32 i32 i32 i32) (result i32)
    local.get 0
    local.get 1
    local.get 2
    local.get 3
    i32.add
    i32.add
    i32.add
  )
  (func $func (export "func") (param $i i32) (result i32)
    local.get $i

{% for _ in range(NUM1) -%}
    (call $add4
      (local.get $i (local.tee $i (i32.load)))
      (local.get $i (local.tee $i (i32.load)))
      (local.get $i (local.tee $i (i32.load)))
      (local.get $i (local.tee $i (i32.load)))
    )
{% endfor -%}

{% for _ in range(NUM2) -%}
    call $add4
{% endfor -%}
  )
  (func (export "_start")
    (call $func (i32.const 1))
    (i32.store (i32.const 0))
  )
  (memory (export "memory") 1)
)

;; Implementation limits:
;;
;; WAMR: UINT16_MAX cells
;; https://github.com/bytecodealliance/wasm-micro-runtime/blob/b5eea934cfaef5208a7bb4c9813699697d352fe1/core/iwasm/interpreter/wasm_loader.c#L1990
;;
;; wasmparser: MAX_WASM_FUNCTION_LOCALS = 50000
;; https://github.com/bytecodealliance/wasm-tools/blob/5e8639a37260cdc1aab196f5ae5c7ae6427c214f/crates/wasmparser/src/limits.rs#L28

;; jinja2 -DNUM=1000000 many_locals.wast.jinja > many_locals1000000.wast
;; jinja2 -DNUM=100000000 many_locals.wast.jinja | wast2json -o many_locals.json -
;; for larger NUM, probably it's simpler to modify LEB128 in the binary.

{% set NUM = NUM | default(70000) | int %}

(module
  (func (export "func_with_many_locals") (param i32) (result i32)
    (local
    {% for x in range(NUM) -%}
    i32
    {% endfor %}
    )
    (local.get 0)
    (local.set {{NUM}})
    (local.get {{NUM}})
  )
)

(assert_return (invoke "func_with_many_locals" (i32.const 0)) (i32.const 0))
(assert_return (invoke "func_with_many_locals" (i32.const 1)) (i32.const 1))
(assert_return (invoke "func_with_many_locals" (i32.const 2)) (i32.const 2))
